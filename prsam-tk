#!/usr/bin/env python
#
# Copyright 2012 Robert Schroll
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import pyPdf

from Tkinter import *
import tkMessageBox
import tkFileDialog

from prsannots.manager import Manager, NotMountedError

class EntryValue(Entry):
    
    def __init__(self, master, hint='', **kw):
        self.var = StringVar()
        Entry.__init__(self, master, textvariable=self.var, **kw)
    
    def set(self, value):
        self.var.set(value)
    
class SpinboxValue(Spinbox):
    
    def __init__(self, master, **kw):
        self.var = StringVar()
        Spinbox.__init__(self, master, textvariable=self.var, **kw)
    
    def set(self, value):
        self.var.set(value)

class Main(Frame):
    
    def __init__(self, master, manager, needs_save):
        Frame.__init__(self, master)
        self.manager = manager
        self.needs_save = needs_save
        n_sync = len(self.manager.needing_sync)
        self.master.protocol('WM_DELETE_WINDOW', self.close)
        
        self.file_entry = EntryValue(self, width=35, state='readonly')
        self.file_entry.grid(row=0, column=0, sticky=E+W)
        self.file_button = Button(self, text='...', command=self.load_file)
        self.file_button.grid(row=0, column=1, sticky=W)
        
        self.add_frame = Frame(self)
        self.add_frame.grid(row=1, column=0, columnspan=2, sticky=E+W)
        
        Label(self.add_frame, text="Add file to library", font='TkHeadingFont').grid(row=0, column=0, columnspan=7, pady=(0,2))
        
        Label(self.add_frame, text="Dice PDF into").grid(row=1, column=0, columnspan=2, sticky=W)
        self.ncols_entry = SpinboxValue(self.add_frame, from_=1, to=10, width=2, justify=RIGHT)
        self.ncols_entry.grid(row=1, column=2, sticky=E)
        Label(self.add_frame, text="columns").grid(row=1, column=3, sticky=W)
        self.nrows_entry = SpinboxValue(self.add_frame, from_=1, to=10, width=2, justify=RIGHT)
        self.nrows_entry.grid(row=1, column=4, sticky=E)
        Label(self.add_frame, text="rows").grid(row=1, column=5, sticky=W)
        
        Label(self.add_frame, text="Overlap fraction").grid(row=2, column=0, columnspan=2, sticky=W)
        self.olh_entry = SpinboxValue(self.add_frame, from_=0, to=0.2, increment=0.01, width=4, justify=RIGHT)
        self.olh_entry.grid(row=2, column=2, sticky=E)
        Label(self.add_frame, text="horizontal").grid(row=2, column=3, sticky=W)
        self.olv_entry = SpinboxValue(self.add_frame, from_=0, to=0.2, increment=0.01, width=4, justify=RIGHT)
        self.olv_entry.grid(row=2, column=4, sticky=E)
        Label(self.add_frame, text="vertical").grid(row=2, column=5, sticky=W)
        
        Label(self.add_frame, text="Title").grid(row=3, column=0, sticky=E)
        self.title_entry = EntryValue(self.add_frame)
        self.title_entry.grid(row=3, column=1, columnspan=5, sticky=E+W)
        
        Label(self.add_frame, text="Author").grid(row=4, column=0, sticky=E)
        self.author_entry = EntryValue(self.add_frame)
        self.author_entry.grid(row=4, column=1, columnspan=5, sticky=E+W)
        self.add_button = Button(self.add_frame, text='Add', command=self.add)
        self.add_button.grid(row=3, column=6, rowspan=2, sticky=S)
        
        self.import_frame = Frame(self)
        self.import_frame.grid(row=1, column=0, columnspan=2, sticky=N+S+E+W)
        self.import_frame.columnconfigure(0, weight=1)  # Expand first column to fill space
        self.import_frame.columnconfigure(1, weight=0)  # Don't expand second column
        
        Label(self.import_frame, text="Import PDF already on reader", font='TkHeadingFont').grid(row=0, column=0, columnspan=2, pady=(0,2))
        Label(self.import_frame, text="Select directory for syncing annotations").grid(row=1, column=0, sticky=W)
        self.import_file_entry = EntryValue(self.import_frame, width=35, state='readonly')
        self.import_file_entry.grid(row=2, column=0, sticky=E+W)
        self.import_file_button = Button(self.import_frame, text='...', command=self.load_import_dir)
        self.import_file_button.grid(row=2, column=1, sticky=W)
        self.import_button = Button(self.import_frame, text="Import", command=self.do_import)
        self.import_button.grid(row=3, column=1, sticky=E)

        self.message_frame = Label(self, justify=LEFT)
        self.message_frame.grid(row=1, column=0, columnspan=2, sticky=N+S+E+W)
        
        self.solo_message_frame = Label(self, justify=LEFT)
        self.solo_message_frame.grid(row=1, column=0, columnspan=2, sticky=N+S+E+W)
        self.solo_message_frame.grid_remove()
        
        Frame(self, height=2, bd=1, relief=SUNKEN).grid(row=2, column=0, columnspan=2, sticky=E+W, pady=2)
        
        self.sync_button = Button(self, text='Sync %i files' % n_sync, command=self.sync)
        self.sync_button.grid(row=3, column=0, sticky=W)
        if not n_sync:
            self.sync_button.grid_remove()  # Bye Bye Bye
        self.close_button = Button(self, text='Close', command=self.close)
        self.close_button.grid(row=3, column=1, sticky=E)
        
        self.status = Label(self, text="", bd=1, relief=SUNKEN, anchor=W)
        self.status.grid(row=4, column=0, columnspan=2, sticky=E+W, pady=(2,0))
        
        self.reset()
        self.message()
    
    def reset(self):
        self.file_entry.set('')
        self.title_entry.set('')
        self.author_entry.set('')
        self.ncols_entry.set(1)
        self.nrows_entry.set(1)
        self.olh_entry.set(0.05)
        self.olv_entry.set(0.05)
        self.import_file_entry.set('')
        self.import_button.config(state='disabled')
        self.master.focus()
    
    def message(self, text=''):
        self.import_frame.grid_remove()
        self.message_frame.grid()
        self.message_frame.config(text="Select a file above to be added to your library.\n\n"+text)
    
    def solo_message(self, text=None):
        if text is not None:
            self.solo_message_frame.config(text=text)
            self.solo_message_frame.grid()
        else:
            self.solo_message_frame.grid_remove()
    
    def load_file(self):
        filename = tkFileDialog.askopenfilename(parent=root, title="Choose PDF file to load",
                    filetypes=[('PDF files', '.pdf'), ('All files', '.*')])
        self.prep_file(filename)
    
    def prep_file(self, filename):
        if filename is None:
            filename = ''
        self.file_entry.set(filename)
        
        if not filename:
            self.message()
            return
        try:
            pdf = pyPdf.PdfFileReader(open(filename, 'rb'))
        except (IOError, pyPdf.utils.PdfReadError):
            self.message("Selected file is not a PDF file.")
            return
        
        if self.manager.in_library(filename):
            print self.manager.in_library(filename)
            self.message("Selected file is already in library.")
            return
        
        if filename.startswith(self.manager.mount):
            self.message_frame.grid_remove()
            self.import_frame.grid()
        else:
            self.message_frame.grid_remove()
            self.import_frame.grid_remove()
            self.title_entry.set(pdf.documentInfo.get('/Title', ''))
            self.author_entry.set(pdf.documentInfo.get('/Author', ''))
    
    def add(self):
        try:
            self.manager.add_diced_pdf(self.file_entry.get(),
                                       (int(self.ncols_entry.get()), int(self.nrows_entry.get()),
                                        (float(self.olh_entry.get()), float(self.olv_entry.get()))),
                                       title=self.title_entry.get(), author=self.author_entry.get())
        except (ValueError, IOError, pyPdf.utils.PdfReadError), e:
            tkMessageBox.showerror(title="Add file",
                                   message="Could not add file to library.\n\n" + str(e))
        else:
            self.reset()
            self.needs_save = True
            self.message("File added to library.")
    
    def load_import_dir(self):
        syncdir = tkFileDialog.askdirectory(title="Select mount point of reader", mustexist=True)
        if syncdir.startswith(self.manager.mount):
            syncdir = ''
        self.import_file_entry.set(syncdir)
        
        self.import_button.config(state=(syncdir and 'normal' or 'disabled'))
    
    def do_import(self):
        try:
            self.manager.import_pdf(self.file_entry.get(), self.import_file_entry.get())
        except IOError, e:
            tkMessageBox.showerror(title="Import file",
                                   message="Could not import file to library.\n\n" + str(e))
        else:
            self.reset()
            self.needs_save = True
            self.message("File added to library.")
    
    def close(self):
        if self.needs_save:
            self.manager.save()
        self.master.destroy()
    
    def sync(self):
        need_sync = self.manager.needing_sync
        for i, filename in enumerate(need_sync):
            self.sync_button.config(text="Syncing %i/%i..." % (i+1, len(need_sync)), relief=SUNKEN)
            self.solo_message("Syncing %s" % os.path.basename(filename))
            self.master.update_idletasks()  # Update the sync_button and status text
            self.manager.sync_pdf(filename)
        self.sync_button.grid_remove()
        self.solo_message()
        self.needs_save = True

if __name__ == '__main__':
    
    m = Manager()
    root = Tk()
    root.resizable(width=False, height=False)
    root.title("PRS Annotation Manager")
    needs_save = False
    quit_ = False
    
    if not m.load_mounted_reader():
        root.withdraw()  # Don't show root window yet.
        mount = tkFileDialog.askdirectory(title="Select mount point of reader", mustexist=True)
        if not mount:
            quit_ = True
        else:
            if m.load_mount(mount):
                if tkMessageBox.askyesno(title="Adjust settings?",
                        message="The settings indicate that this reader is" +
                                "usually mounted at %s.\n\n" % m.settings['mount'] +
                                "Now it is mounted at %s.\n\n" % mount +
                                "Adjust the settings?"):
                    m.update_mount_setting()
                    needs_save = True
            else:
                if tkMessageBox.askyesno(title="Create library?",
                        message="There is no library on this computer for the" +
                                "reader at %s.\n\n" % mount +
                                "Create a new library?"):
                    try:
                        m.new(mount)
                    except (NotMountedError, IOError), e:
                        tkMessageBox.showerror(title="Create library",
                            message="Could not create library.\n\n" + str(e))
                        quit_ = True
                    else:
                        needs_save = True
                else:  # No to create library
                    quit_ = True
        if quit_:
            root.destroy()
            sys.exit(1)
        else:
            root.deiconify()  # Now show root
    
    main = Main(root, m, needs_save)
    main.pack(padx=2, pady=2)
    if len(sys.argv) > 1:
        filename = os.path.abspath(sys.argv[1])
        if os.path.exists(filename):
            main.prep_file(filename)
    
    root.mainloop()
